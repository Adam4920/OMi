{"version":3,"sources":["components/Ask.js","components/Search.js","components/Sym.js","components/Controls.js","App.js","reportWebVitals.js","index.js"],"names":["AskWrap","styled","section","Ask","state","text","setText","value","setState","this","React","Component","Search","props","items","onSearch","string","cached","console","log","onSelect","item","found","name","onFocus","autoFocus","Sym1","button","Sym","type","temp","onClick","click","Controls","isLoaded","symptomBranch","searchItems","control","searchFound","fetch","then","res","json","result","Symptom","remove","undefined","Disease","setTimeout","Symptoms","display","i","push","length","r","map","s","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kiBAIA,IAAMA,EAAUC,IAAOC,QAAV,KAkCEC,E,4MApBXC,MAAQ,CACJC,KAAM,gC,EAaVC,QAAU,SAACC,GACP,EAAKC,SAAS,CAACH,KAAME,K,uDALrB,OAAO,cAACP,EAAD,UAAUS,KAAKL,MAAMC,W,GAblBK,IAAMC,W,eCiCTC,MAxCf,SAAgBC,GAuBR,OACC,8BACG,cAAC,0BAAD,CACAC,MAAOD,EAAMC,MACbC,SAxB2B,SAACC,EAAQC,GAI5BC,QAAQC,IAAIH,EAAQC,IAqB5BG,SAlB6B,SAACC,GAEtBH,QAAQC,IAAIE,GAEZR,EAAMS,MAAMD,EAAKE,OAezBC,QAX4B,WACpBN,QAAQC,IAAI,YAWpBM,WAAS,O,4rBClCrB,IAAMC,EAAOzB,IAAO0B,OAAV,KAsDKC,E,4MAfXxB,MAAQ,CACJyB,KAAM,EAAKhB,MAAMgB,KACjBC,KAAM,K,uDAGA,IAAD,OAEL,OAAO,8BACH,eAACJ,EAAD,CAAMK,QAAW,kBAAM,EAAKlB,MAAMmB,MAAM,EAAK5B,MAAMyB,OAAnD,cAA4DpB,KAAKI,MAAMgB,KAAvE,a,GAVMnB,IAAMC,WCkETsB,E,4MA/FX7B,MAAQ,CACJ8B,UAAU,EACVC,cAAe,CAAC,WAAY,QAAS,UAAW,WAChDC,YAAa,GACbC,QAAS,G,EAebC,YAAc,SAACf,GACXgB,MAAM,iCAAiChB,GAClCiB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UACZF,MACG,SAACG,GACI,EAAKnC,SAAS,CAAC2B,cAAeQ,EAAOC,aAIlD,EAAKpC,SAAS,CAAC6B,QAAS,K,EAmChCQ,OAAS,SAAChB,GAEN,IAAIC,EAAO,CAAC,UACZS,MAAM,iCAAiCV,GAClCW,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UACZF,MACG,SAACG,GACOb,EAAI,YAAQa,EAAOC,cACGE,GAAlBH,EAAOI,UACPjB,EAAO,CAAC,qBAchCkB,YAAW,WACP,EAAKxC,SAAS,CAAC2B,cAAeL,MAC/B,M,kEA/Ec,IAAD,OAChBS,MAAM,sCACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UACZF,MACG,SAACG,GACO,EAAKnC,SAAS,CAAC4B,YAAaO,EAAOM,gB,+BAqBrD,IAHM,IAAD,OAEDC,EAAU,GACLC,EAAI,EAAGA,EAAI,EAAGA,IACnBD,EAAQE,KAAK3C,KAAKL,MAAM+B,cAAcgB,IAInB,IAAnBD,EAAQG,SACRH,EAAQE,KAAK,QACbF,EAAQE,KAAK,QACbF,EAAQE,KAAK,QACbF,EAAQE,KAAK,SAGjB,IAAIE,EAAI,cAAC,EAAD,CAAQhC,MAASb,KAAK6B,YAAaxB,MAASL,KAAKL,MAAMgC,cAQ/D,OAP2B,IAAvB3B,KAAKL,MAAMiC,UACXiB,EAAIJ,EAAQK,KAAI,SAAAC,GAAC,OACb,cAAC,EAAD,CAAKxB,MAAS,EAAKa,OAAQhB,KAAQ2B,QAKpC,8BAEFF,Q,GA3DU5C,IAAMC,WCOd8C,MAbf,WAIE,OACE,sBAAKC,UAAU,MAAf,UACE,cAAC,EAAD,IAEA,cAAC,EAAD,QCASC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"js/main.4030618d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\nconst AskWrap = styled.section`\r\n        width: 75%;\r\n        min-width: 300px;\r\n        color: white;\r\n        display: block;\r\n        margin: auto;\r\n        margin-top: 50px;\r\n        margin-bottom: 50px;\r\n        font-size: 40px;\r\n    `;\r\n\r\nclass Ask extends React.Component {\r\n\r\n\r\n    state = {\r\n        text: \"Tell me about your symptoms!\",\r\n    }\r\n\r\n    \r\n\r\n    \r\n\r\n    render (){\r\n\r\n        return <AskWrap>{this.state.text}</AskWrap>;\r\n\r\n    }\r\n\r\n    setText = (value) => {\r\n        this.setState({text: value});\r\n    }\r\n\r\n}\r\n\r\nexport default Ask;","import React, {useState} from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\nimport { ReactSearchAutocomplete } from 'react-search-autocomplete'\r\n\r\n\r\n\r\nfunction Search(props) {   \r\n\r\n\r\n                const handleOnSearch = (string, cached) => {\r\n                    // onSearch returns the string searched and if\r\n                    // the values are cached. If the values are cached\r\n                    // \"cached\" contains the cached values, if not, returns false\r\n                    console.log(string, cached)\r\n                  }\r\n                \r\n                  const handleOnSelect = (item) => {\r\n                    // the item selected\r\n                    console.log(item)\r\n\r\n                    props.found(item.name);\r\n\r\n                  }\r\n                \r\n                  const handleOnFocus = () => {\r\n                    console.log('Focused');\r\n                  }\r\n                \r\n\r\n        return (\r\n         <div>\r\n            <ReactSearchAutocomplete\r\n            items={props.items}\r\n            onSearch={handleOnSearch}\r\n            onSelect={handleOnSelect}\r\n            onFocus={handleOnFocus}\r\n            autoFocus\r\n          />\r\n        </div>\r\n        )\r\n\r\n    }\r\n\r\n    \r\n\r\n\r\nexport default Search;","import React from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\nconst Sym1 = styled.button`\r\n\r\n    @keyframes out {\r\n        from { \r\n            opacity: 1;\r\n        }\r\n        to { \r\n            opacity: 0;\r\n            margin-left: -500px;\r\n        }\r\n    }\r\n\r\n    background-color: black;\r\n    color: white;\r\n    border: 3px solid white;\r\n    border-radius: 20px;\r\n    font-size: 26px;\r\n    padding: 10px 10px 10px 10px;\r\n    width: 30%;\r\n    min-width: 225px;\r\n    margin: 0px;\r\n    margin-top:50px;\r\n\r\n    &:focus {\r\n        outline: none;\r\n        animation: out 1s;\r\n        background-color: white;\r\n        color: black;\r\n    }\r\n\r\n    &:hover {\r\n        background-color: white;\r\n        color: black;\r\n    }\r\n\r\n`;\r\n\r\nclass Sym extends React.Component {\r\n\r\n    state = {\r\n        type: this.props.type,\r\n        temp: \"t\"\r\n    }\r\n\r\n    render (){\r\n\r\n        return <div>\r\n            <Sym1 onClick = {() => this.props.click(this.state.type)}> {this.props.type} </Sym1>\r\n            </div>;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Sym;","import React from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\nimport Search from './Search';\r\n\r\nimport Sym from './Sym';\r\n\r\n\r\n\r\nclass Controls extends React.Component{\r\n\r\n    state = {\r\n        isLoaded: false,\r\n        symptomBranch: [\"Headache\", \"Cough\", \"Fatigue\", \"Redness\"],\r\n        searchItems: [],\r\n        control: 0\r\n\r\n        \r\n    }\r\n\r\n    componentDidMount() {  \r\n        fetch(\"http://localhost:8080/autocomplete\")\r\n          .then(res => res.json())\r\n              .then(\r\n                  (result) => {\r\n                          this.setState({searchItems: result.Symptoms});\r\n                  }\r\n              )  \r\n    }\r\n\r\n    searchFound = (name) => {\r\n        fetch(\"http://localhost:8080/disease/\"+name)\r\n            .then(res => res.json())\r\n                .then(\r\n                    (result) => {\r\n                         this.setState({symptomBranch: result.Symptom});\r\n                    }\r\n                )  \r\n\r\n            this.setState({control: 1});\r\n                \r\n    }\r\n\r\n    render() {\r\n\r\n        let display = [];\r\n        for (let i = 0; i < 4; i++) {\r\n            display.push(this.state.symptomBranch[i]);\r\n            //console.log(\"render log: \" + display[i]);\r\n        }\r\n\r\n        if (display.length === 0) {\r\n            display.push(\"null\");\r\n            display.push(\"null\");\r\n            display.push(\"null\");\r\n            display.push(\"null\");\r\n        }\r\n        \r\n        let r = <Search found = {this.searchFound} items = {this.state.searchItems} />;\r\n        if (this.state.control === 1){\r\n            r = display.map(s => (\r\n                <Sym click = {this.remove} type = {s} />\r\n                \r\n            ));\r\n        }\r\n\r\n        return <div>\r\n            \r\n            {r}\r\n\r\n        </div>;\r\n\r\n    }\r\n\r\n    remove = (type) => {\r\n\r\n        let temp = [\"error1\"];\r\n        fetch(\"http://localhost:8080/disease/\"+type)\r\n            .then(res => res.json())\r\n                .then(\r\n                    (result) => {\r\n                            temp =  [...result.Symptom];\r\n                            if (result.Disease != undefined){\r\n                                temp = [\"found disease\"];\r\n                            }\r\n                    }\r\n                )   \r\n            \r\n        /*for (let i = 0; i < temp.length; i++){\r\n            //console.log(temp[i].type + \"-\" + type);\r\n            if (temp[i].type === type){\r\n                \r\n                temp.splice(i, 1);\r\n                break;\r\n            }\r\n        }*/\r\n\r\n        setTimeout(() => {\r\n            this.setState({symptomBranch: temp});\r\n        }, 900);\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Controls;","import './App.css';\r\nimport Ask from './components/Ask';\r\nimport Controls from './components/Controls';\r\n\r\nfunction App() {\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Ask />\r\n      \r\n      <Controls />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}