[{"C:\\Code\\htne\\OMi\\react-frontend\\src\\index.js":"1","C:\\Code\\htne\\OMi\\react-frontend\\src\\App.js":"2","C:\\Code\\htne\\OMi\\react-frontend\\src\\reportWebVitals.js":"3","C:\\Code\\htne\\OMi\\react-frontend\\src\\components\\Ask.js":"4","C:\\Code\\htne\\OMi\\react-frontend\\src\\components\\Controls.js":"5","C:\\Code\\htne\\OMi\\react-frontend\\src\\components\\Search.js":"6","C:\\Code\\htne\\OMi\\react-frontend\\src\\components\\Sym.js":"7","C:\\Code\\htne\\OMi\\react-frontend\\src\\components\\Disease.js":"8","C:\\Code\\htne\\OMi\\react-frontend\\src\\components\\PageWrap.js":"9","C:\\Code\\htne\\OMi\\react-frontend\\src\\components\\BtnNext.js":"10","C:\\Code\\htne\\OMi\\react-frontend\\src\\components\\Bar.js":"11","C:\\Code\\htne\\OMi\\react-frontend\\src\\components\\Intro.js":"12"},{"size":500,"mtime":499162500000,"results":"13","hashOfConfig":"14"},{"size":423,"mtime":1610882210930,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"14"},{"size":630,"mtime":1610878260988,"results":"17","hashOfConfig":"14"},{"size":6170,"mtime":1610884484528,"results":"18","hashOfConfig":"14"},{"size":1251,"mtime":1610798748955,"results":"19","hashOfConfig":"14"},{"size":2215,"mtime":1610878689032,"results":"20","hashOfConfig":"14"},{"size":862,"mtime":1610829217877,"results":"21","hashOfConfig":"14"},{"size":368,"mtime":1610886313433,"results":"22","hashOfConfig":"14"},{"size":498,"mtime":1610874421093,"results":"23","hashOfConfig":"14"},{"size":1295,"mtime":1610883332081,"results":"24","hashOfConfig":"14"},{"size":1286,"mtime":1610884089848,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1sjfojh",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Code\\htne\\OMi\\react-frontend\\src\\index.js",[],["55","56"],"C:\\Code\\htne\\OMi\\react-frontend\\src\\App.js",[],"C:\\Code\\htne\\OMi\\react-frontend\\src\\reportWebVitals.js",[],"C:\\Code\\htne\\OMi\\react-frontend\\src\\components\\Ask.js",[],["57","58"],"C:\\Code\\htne\\OMi\\react-frontend\\src\\components\\Controls.js",["59","60","61","62"],"import React from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\nimport Search from './Search';\r\n\r\nimport Sym from './Sym';\r\n\r\nimport Disease from './Disease';\r\n\r\nimport Ask from './Ask';\r\n\r\nimport BtnNext from './BtnNext';\r\n\r\nconst OuterWrap = styled.div`\r\n\r\n    height: 100%;\r\n    background: #121212;\r\n\r\n`;\r\n\r\n\r\nclass Controls extends React.Component{\r\n\r\n    state = {\r\n        isLoaded: false,\r\n        symptomBranch: [\"Headache\", \"Cough\", \"Clammy Skin\", \"Throat Sore\"],\r\n        firstTime: true,\r\n        firstTime2: true,\r\n        searchItems: [],\r\n        control: 0,\r\n        diseased: false,\r\n        dname: \"unset\",\r\n        ddesc: \"unset\",\r\n        blacklist: [],\r\n        final: 0\r\n    }\r\n\r\n    componentDidMount() {  \r\n        fetch(\"http://localhost:8080/autocomplete\")\r\n          .then(res => res.json())\r\n              .then(\r\n                  (result) => {\r\n                          this.setState({searchItems: result.Symptoms});\r\n                  }\r\n              )  \r\n    }\r\n\r\n    searchFound = (name) => {\r\n        fetch(\"http://localhost:8080/disease/\"+name)\r\n            .then(res => res.json())\r\n                .then(\r\n                    (result) => {\r\n                         this.setState({symptomBranch: result.data});\r\n                    }\r\n                )  \r\n\r\n            this.setState({control: 1});\r\n                \r\n    }\r\n\r\n    render() {\r\n\r\n        let display = [];\r\n        let c = 0;\r\n        //for (let i = 0; i < this.state.symptomBranch.length; i++) {\r\n        let keepgoing = true;\r\n\r\n        if (this.state.firstTime){\r\n            display = [...this.state.symptomBranch];\r\n        } else\r\n        while (keepgoing){\r\n            \r\n            let i = Math.floor(Math.random() * this.state.symptomBranch.length);  \r\n\r\n\r\n            //Math.floor(Math.random() * 11);  \r\n\r\n            let inBL = false;\r\n            if (this.state.blacklist[0] !== undefined)\r\n            for (let z = 0; z < this.state.blacklist.length; z++) {\r\n   \r\n                if (this.state.symptomBranch[i].toLowerCase() === this.state.blacklist[z].toLowerCase()){\r\n                    inBL = true;\r\n                    console.log(\"was hre\");\r\n                }\r\n                \r\n            }\r\n\r\n            if (inBL) continue;\r\n\r\n            c++;\r\n            display.push(this.state.symptomBranch[i]);\r\n            if (display.length == 4) keepgoing = false;\r\n\r\n            //console.log(\"render log: \" + display[i]);\r\n\r\n\r\n        }\r\n        let a = <section> </section>;\r\n        let e = <section> </section>;\r\n        let r = <Disease name = {this.state.dname} desc = {this.state.ddesc} />\r\n\r\n        if (this.state.diseased === false) {\r\n\r\n            a = <Ask />;\r\n            r = \r\n\r\n                display.map(s => (\r\n                <Sym click = {this.remove} type = {s} key = {s} />\r\n\r\n                \r\n            ));\r\n            e = <BtnNext click = {this.nextSet}/>\r\n        } else {\r\n            console.log(\"##\" + this.state.ddesc);\r\n        }\r\n\r\n        if (this.state.firstTime) e = <Search found = {this.remove} items = {this.state.searchItems}></Search>;\r\n        \r\n\r\n        return <OuterWrap>\r\n            {a}\r\n            {r}\r\n            <div>{e}</div>\r\n        </OuterWrap>;\r\n\r\n    }\r\n\r\n    nextSet = () => {\r\n\r\n        if (this.state.firstTime2){\r\n        fetch(\"http://localhost:8080/symptoms\")\r\n          .then(res => res.json())\r\n              .then(\r\n                  (result) => {\r\n                          this.setState({symptomBranch: result.symptoms, firstTime2: false, firstTime: false}); // you are here\r\n                  }\r\n              )  \r\n        } else {\r\n            this.forceUpdate();\r\n        }\r\n\r\n    }\r\n\r\n    remove = (type) => {\r\n\r\n\r\n        let pq = [...this.state.blacklist];\r\n        pq.push(type);\r\n\r\n        type = type.replace(\" \", \"%20\");\r\n        let ddname = \"\";\r\n        let dddesc = \"\";\r\n        let ddd = false;\r\n    \r\n        let temp = [\"\", \"\", \"\", \"\"];\r\n        console.log(\" --- \" + type);\r\n        fetch(\"http://localhost:8080/disease/\"+type.toLowerCase())\r\n            .then(res => res.json())\r\n                .then(\r\n                    (result) => {\r\n                            console.log(\"Disease data val: \" + result.data.disease);\r\n                            if (result.data.disease != undefined){\r\n                                temp = \"\";\r\n                                console.log(\"OAISDHIAHDSA\");\r\n                                ddname = result.data.disease;\r\n                                dddesc =  result.data.description;\r\n                                ddd = true;\r\n\r\n                                //this.setState({final: true});\r\n                                this.setState({diseased: ddd, dname: ddname, ddesc: dddesc, blacklist: pq});\r\n\r\n                            } else {\r\n\r\n\r\n                                temp = [];\r\n\r\n                                console.log(result.data);\r\n\r\n                                if (result.data.symptoms != undefined) {\r\n                                    for (let z = 0; z < result.data.symptoms.length; z++) {\r\n                                    \r\n                                        temp.push(result.data.symptoms[z]);\r\n                                    }\r\n\r\n                                } else\r\n                                for (let z = 0; z < result.data.length; z++) {\r\n                                    \r\n                                    temp.push(result.data[z]);\r\n                                }\r\n\r\n                                \r\n\r\n                            }\r\n                    }\r\n                )   \r\n            \r\n        /*for (let i = 0; i < temp.length; i++){\r\n            //console.log(temp[i].type + \"-\" + type);\r\n            if (temp[i].type === type){\r\n                \r\n                temp.splice(i, 1);\r\n                break;\r\n            }\r\n        }*/\r\n\r\n        \r\n        setTimeout(() => {\r\n            console.log(\"ddd: \" + ddd);\r\n            this.setState({symptomBranch: temp, diseased: ddd, dname: ddname, ddesc: dddesc, blacklist: pq, firstTime: false});\r\n\r\n        }, 900);\r\n\r\n        \r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Controls;","C:\\Code\\htne\\OMi\\react-frontend\\src\\components\\Search.js",["63","64"],"import React, {useState} from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\nimport { ReactSearchAutocomplete } from 'react-search-autocomplete'\r\n\r\n\r\n\r\nfunction Search(props) {   \r\n\r\n\r\n                const handleOnSearch = (string, cached) => {\r\n                    // onSearch returns the string searched and if\r\n                    // the values are cached. If the values are cached\r\n                    // \"cached\" contains the cached values, if not, returns false\r\n                    console.log(string, cached)\r\n                  }\r\n                \r\n                  const handleOnSelect = (item) => {\r\n                    // the item selected\r\n                    console.log(item)\r\n\r\n                    props.found(item.name);\r\n\r\n                  }\r\n                \r\n                  const handleOnFocus = () => {\r\n                    console.log('Focused');\r\n                  }\r\n                \r\n\r\n        return (\r\n         <div>\r\n            <ReactSearchAutocomplete\r\n            items={props.items}\r\n            onSearch={handleOnSearch}\r\n            onSelect={handleOnSelect}\r\n            onFocus={handleOnFocus}\r\n            autoFocus\r\n          />\r\n        </div>\r\n        )\r\n\r\n    }\r\n\r\n    \r\n\r\n\r\nexport default Search;","C:\\Code\\htne\\OMi\\react-frontend\\src\\components\\Sym.js",["65","66"],"import React from 'react';\r\nimport head from \"../img/head.png\";\r\nimport cough from \"../img/cough.png\";\r\nimport throat from \"../img/throat.png\";\r\nimport rash from \"../img/rash.png\";\r\nimport styled from 'styled-components';\r\n\r\nconst Sym1 = styled.button`\r\n\r\n    @keyframes out {\r\n        from { \r\n            opacity: 1;\r\n        }\r\n        to { \r\n            opacity: 0;\r\n        }\r\n    }\r\n\r\n    background: linear-gradient(to right, #ffffff , #e6f9fc);\r\n    color: black;\r\n    font-size:30px;\r\n    border: none;\r\n    border-radius: 10px;\r\n    width: 240px;\r\n    margin: 20px;\r\n    margin-top:50px;\r\n    height: 350px;\r\n\r\n    &:focus {\r\n        outline: none;\r\n        animation: out 1s;\r\n        background-color: #e9ecf2;\r\n        color: black;\r\n        border: 5px solid black;\r\n    }\r\n\r\n    &:hover {\r\n        background: white;\r\n        color: black;\r\n        border: 5px solid black;\r\n    }\r\n\r\n`;\r\nconst Text1 = styled.p`\r\n    font-size: 18px;\r\n    font-weight: bold;\r\n`;\r\n\r\nconst Wrapp = styled.div`\r\n    margin-top: 50px;\r\n`;\r\nconst Wrapp2 = styled.div`\r\n    margin-top: 50px;\r\n    max-height:150px;\r\n    height: 100px;\r\n`;\r\n\r\nclass Sym extends React.Component {\r\n\r\n    state = {\r\n        type: this.props.type,\r\n        temp: \"t\",\r\n        img: 0\r\n    }\r\n\r\n    render (){\r\n\r\n        console.log(this.state.type);\r\n        let x = \"\";\r\n        if (this.state.type != undefined){\r\n        let t = this.state.type.replace(\" \", \"%20\").toLowerCase();\r\n        \r\n        \r\n        \r\n        if (t.includes(\"head\")){\r\n             x = head;\r\n        }\r\n        else if (t.includes(\"throat\")){\r\n            x = throat;\r\n       }\r\n        else if (t.includes(\"skin\")){\r\n            x = rash;\r\n       }\r\n        else if (t.includes(\"cough\")){\r\n            x = cough;\r\n       }\r\n        else x = head;\r\n\r\n     } else {\r\n\r\n\r\n\r\n         }\r\n\r\n\r\n        return <Sym1 onClick = {() => this.props.click(this.state.type)}> \r\n                <Wrapp>\r\n                    <img src={x}></img>\r\n                </Wrapp>\r\n                <Wrapp2>\r\n                    <Text1>{this.props.type}</Text1>\r\n                </Wrapp2>\r\n                \r\n                    \r\n                </Sym1>;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Sym;","C:\\Code\\htne\\OMi\\react-frontend\\src\\components\\Disease.js",[],"C:\\Code\\htne\\OMi\\react-frontend\\src\\components\\PageWrap.js",[],"C:\\Code\\htne\\OMi\\react-frontend\\src\\components\\BtnNext.js",[],"C:\\Code\\htne\\OMi\\react-frontend\\src\\components\\Bar.js",[],"C:\\Code\\htne\\OMi\\react-frontend\\src\\components\\Intro.js",[],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"67","replacedBy":"71"},{"ruleId":"69","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":92,"column":13,"nodeType":"75","messageId":"76","endLine":92,"endColumn":14},{"ruleId":"77","severity":1,"message":"78","line":94,"column":32,"nodeType":"79","messageId":"80","endLine":94,"endColumn":34},{"ruleId":"77","severity":1,"message":"81","line":164,"column":53,"nodeType":"79","messageId":"80","endLine":164,"endColumn":55},{"ruleId":"77","severity":1,"message":"81","line":181,"column":58,"nodeType":"79","messageId":"80","endLine":181,"endColumn":60},{"ruleId":"73","severity":1,"message":"82","line":1,"column":16,"nodeType":"75","messageId":"76","endLine":1,"endColumn":24},{"ruleId":"73","severity":1,"message":"83","line":3,"column":8,"nodeType":"75","messageId":"76","endLine":3,"endColumn":14},{"ruleId":"77","severity":1,"message":"81","line":70,"column":29,"nodeType":"79","messageId":"80","endLine":70,"endColumn":31},{"ruleId":"84","severity":1,"message":"85","line":98,"column":21,"nodeType":"86","endLine":98,"endColumn":34},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],["87"],["88"],"no-unused-vars","'c' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'useState' is defined but never used.","'styled' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]