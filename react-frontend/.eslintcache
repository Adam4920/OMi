[{"C:\\Code\\htne\\OMi\\react-frontend\\src\\index.js":"1","C:\\Code\\htne\\OMi\\react-frontend\\src\\App.js":"2","C:\\Code\\htne\\OMi\\react-frontend\\src\\reportWebVitals.js":"3","C:\\Code\\htne\\OMi\\react-frontend\\src\\components\\Ask.js":"4","C:\\Code\\htne\\OMi\\react-frontend\\src\\components\\Controls.js":"5","C:\\Code\\htne\\OMi\\react-frontend\\src\\components\\Search.js":"6","C:\\Code\\htne\\OMi\\react-frontend\\src\\components\\Sym.js":"7"},{"size":500,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":239,"mtime":1610796772492,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":630,"mtime":1610806366461,"results":"12","hashOfConfig":"9"},{"size":2554,"mtime":1610810355781,"results":"13","hashOfConfig":"9"},{"size":1251,"mtime":1610798748955,"results":"14","hashOfConfig":"9"},{"size":1939,"mtime":1610811356938,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1sjfojh",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Code\\htne\\OMi\\react-frontend\\src\\index.js",[],["33","34"],"C:\\Code\\htne\\OMi\\react-frontend\\src\\App.js",[],"C:\\Code\\htne\\OMi\\react-frontend\\src\\reportWebVitals.js",[],"C:\\Code\\htne\\OMi\\react-frontend\\src\\components\\Ask.js",[],"C:\\Code\\htne\\OMi\\react-frontend\\src\\components\\Controls.js",["35","36","37"],"import React from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\nimport Search from './Search';\r\n\r\nimport Sym from './Sym';\r\n\r\n\r\n\r\nclass Controls extends React.Component{\r\n\r\n    state = {\r\n        isLoaded: false,\r\n        symptomBranch: [\"Headache\", \"Productive Cough\", \"Clammy Skin\", \"Throat Sore\"],\r\n        searchItems: [],\r\n        control: 0\r\n\r\n        \r\n    }\r\n\r\n    componentDidMount() {  \r\n        fetch(\"http://localhost:8080/autocomplete\")\r\n          .then(res => res.json())\r\n              .then(\r\n                  (result) => {\r\n                          this.setState({searchItems: result.Symptoms});\r\n                  }\r\n              )  \r\n    }\r\n\r\n    searchFound = (name) => {\r\n        fetch(\"http://localhost:8080/disease/\"+name)\r\n            .then(res => res.json())\r\n                .then(\r\n                    (result) => {\r\n                         this.setState({symptomBranch: result.Symptom});\r\n                    }\r\n                )  \r\n\r\n            this.setState({control: 1});\r\n                \r\n    }\r\n\r\n    render() {\r\n\r\n        let display = [];\r\n        for (let i = 0; i < 4; i++) {\r\n            display.push(this.state.symptomBranch[i]);\r\n            //console.log(\"render log: \" + display[i]);\r\n        }\r\n        \r\n        //let r = <Search found = {this.searchFound} items = {this.state.searchItems} />;\r\n        //if (this.state.control === 1){\r\n        \r\n\r\n        return <div>\r\n            \r\n            {display.map(s => (\r\n            <Sym click = {this.remove} type = {s} key = {s} />\r\n            \r\n        ))}\r\n\r\n        </div>;\r\n\r\n    }\r\n\r\n    remove = (type) => {\r\n\r\n        let temp = [\"error 2\"];\r\n        console.log(\" --- \" + type);\r\n        fetch(\"http://localhost:8080/disease/\"+type.toLowerCase())\r\n            .then(res => res.json())\r\n                .then(\r\n                    (result) => {\r\n                            temp =  [...result.Symptom];\r\n                            if (result.Disease != undefined){\r\n                                temp = [\"found disease\"];\r\n                            }\r\n                    }\r\n                )   \r\n            \r\n        /*for (let i = 0; i < temp.length; i++){\r\n            //console.log(temp[i].type + \"-\" + type);\r\n            if (temp[i].type === type){\r\n                \r\n                temp.splice(i, 1);\r\n                break;\r\n            }\r\n        }*/\r\n\r\n        setTimeout(() => {\r\n            this.setState({symptomBranch: temp});\r\n        }, 900);\r\n        this.forceUpdate();\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Controls;","C:\\Code\\htne\\OMi\\react-frontend\\src\\components\\Search.js",["38","39"],"import React, {useState} from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\nimport { ReactSearchAutocomplete } from 'react-search-autocomplete'\r\n\r\n\r\n\r\nfunction Search(props) {   \r\n\r\n\r\n                const handleOnSearch = (string, cached) => {\r\n                    // onSearch returns the string searched and if\r\n                    // the values are cached. If the values are cached\r\n                    // \"cached\" contains the cached values, if not, returns false\r\n                    console.log(string, cached)\r\n                  }\r\n                \r\n                  const handleOnSelect = (item) => {\r\n                    // the item selected\r\n                    console.log(item)\r\n\r\n                    props.found(item.name);\r\n\r\n                  }\r\n                \r\n                  const handleOnFocus = () => {\r\n                    console.log('Focused');\r\n                  }\r\n                \r\n\r\n        return (\r\n         <div>\r\n            <ReactSearchAutocomplete\r\n            items={props.items}\r\n            onSearch={handleOnSearch}\r\n            onSelect={handleOnSelect}\r\n            onFocus={handleOnFocus}\r\n            autoFocus\r\n          />\r\n        </div>\r\n        )\r\n\r\n    }\r\n\r\n    \r\n\r\n\r\nexport default Search;","C:\\Code\\htne\\OMi\\react-frontend\\src\\components\\Sym.js",["40"],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":3,"column":8,"nodeType":"47","messageId":"48","endLine":3,"endColumn":14},{"ruleId":"45","severity":1,"message":"49","line":5,"column":8,"nodeType":"47","messageId":"48","endLine":5,"endColumn":14},{"ruleId":"50","severity":1,"message":"51","line":77,"column":48,"nodeType":"52","messageId":"53","endLine":77,"endColumn":50},{"ruleId":"45","severity":1,"message":"54","line":1,"column":16,"nodeType":"47","messageId":"48","endLine":1,"endColumn":24},{"ruleId":"45","severity":1,"message":"46","line":3,"column":8,"nodeType":"47","messageId":"48","endLine":3,"endColumn":14},{"ruleId":"55","severity":1,"message":"56","line":83,"column":21,"nodeType":"57","endLine":83,"endColumn":34},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"no-unused-vars","'styled' is defined but never used.","Identifier","unusedVar","'Search' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'useState' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]